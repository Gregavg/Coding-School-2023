@page "/itemlist/edit/{Id:int?}"
@using FuelStation.Model.Enums;
@using FuelStation.Web.Shared;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigationManager
<ShopTitle></ShopTitle>

@if (isLoading) {
        <div class="spinner-border text-secondary" role="status">
    </div>
} else {
    @if (Id is null) {
            <h3>Create Item</h3>
    } else {
            <h3>Edit Item</h3>
    }
    <EditForm Model="item" OnValidSubmit="OnSave">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Code</label>
                <InputText class="form-control" @bind-Value="@item.Code" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="@item.Description" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Cost</label>
                <InputNumber class="form-control" @bind-Value="@item.Cost" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="@item.Price" />
            </div>
            <div class="col-md-6">
                <label class="form-label">
                    Category</label>
                <InputSelect class="form-control" @bind-Value="item.ItemType">
                    @foreach (var itemType in Enum.GetValues<ItemType>()) {
                        <option value="@itemType">@itemType</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <BootstrapButton ButtonType = "BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                <BootstrapButton ButtonType = "BootstrapButtonType.Secondary" OnClick="OnCancel">Back</BootstrapButton>
            </div>

        </div>
    </EditForm>
}


@code {
    [Parameter] public int? Id { get; set; }
    private ItemEditDto item { get; set; } = null!;
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            item = new();
        } else {
            var tempItem = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
            if (tempItem is not null) {
                item = tempItem;
            } else {
            }
        }
        isLoading = false;
    }

    private void OnCancel() {
        navigationManager.NavigateTo("itemlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("item", item);
        } else {
            response = await httpClient.PutAsJsonAsync("item", item);
        }

        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/itemlist");
        } else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}