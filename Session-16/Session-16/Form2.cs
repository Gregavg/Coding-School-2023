
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraGantt.Scheduling;
using Session_16.Model;
using Session_16.Model.PopulateClasses;
using Session_16.ORM.Repositories;

namespace Session_16 {
    public partial class Form2 : DevExpress.XtraEditors.XtraForm {

        public PetShop petShop = new PetShop();
        public EngagePopulate ep = new EngagePopulate();

        public Form2() {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            // unboundSource1.SetRowCount(42);
        }



        private void Form2_Load_1(object sender, EventArgs e) {
            //Form2 currentForm = Form.ActiveForm;
            //InitPetShop(ep);


            //ToDataBaSe(petShop);
        }

        public PetShop InitPetShop(EngagePopulate eps) { return petShop = ep.SetPopulation(); }

        public void ToDataBaSe(PetShop petShop) {
            try {
                ClearDataBase();
                SetTransactionsDB(petShop.Transactions);
                SetCustomersDB(petShop.Customers);
                SetEmployeesDB(petShop.Employees);
                SetPetDB(petShop.Pets);
                SetPetFoodDB(petShop.Foods);
            }
            catch (Exception) {
                System.Windows.MessageBox.Show("Error saving!");
            }

        }

        public void ClearDataBase() {

            try {
                EmployeeRepo _employeeRepo = new EmployeeRepo();
                PetFoodRepo _petFoodRepo = new PetFoodRepo();
                PetRepo _petRepo = new PetRepo();
                TransactionRepo _transactionRepo = new TransactionRepo();
                CustomerRepo _customerRepo = new CustomerRepo();

                _transactionRepo.Clear();
                _customerRepo.Clear();
                _employeeRepo.Clear();
                _petRepo.Clear();
                _petFoodRepo.Clear();
                
                System.Windows.MessageBox.Show("Database cleared!");
            }
            catch (Exception) {
                System.Windows.MessageBox.Show("Error Clearing Database!");
            }

        }

        public void SetTransactionsDB(List<Transaction>? transactions) {
            foreach (Transaction transaction in transactions) {
                TransactionRepo _transactionRepo = new TransactionRepo();
                _transactionRepo.Add(transaction);
            }
        }


        public void SetPetFoodDB(List<PetFood>? petFoodDB) {
            foreach (var petFood in petFoodDB) {
                PetFoodRepo _petFoodRepo = new PetFoodRepo();
                _petFoodRepo.Add(petFood);
            }
        }

        private void SetPetDB(List<Pet>? pets) {
            foreach (var pet in pets) {
                PetRepo _petRepo = new PetRepo();
                _petRepo.Add(pet);
            }
        }

        private void SetCustomersDB(List<Customer>? customersDB) {

            foreach (var customer in customersDB) {
                CustomerRepo _customerRepo = new CustomerRepo();
                _customerRepo.Add(customer);
            }
        }

        private void SetEmployeesDB(List<Employee>? employeesDB) {

            foreach (var employee in employeesDB) {
                EmployeeRepo _employeeRepo = new EmployeeRepo();
                _employeeRepo.Add(employee);
            }
        }




        private void simpleButton4_Click(object sender, EventArgs e) {
            ClearDataBase();
        }

        private void simpleButton1_Click(object sender, EventArgs e) {
            ToDataBaSe(petShop);

        }


        public void Serialization() {
            Serializer serializer = new Serializer();
            this.petShop = serializer.DeserializeFromFile<PetShop>("petshop.json");
            System.Windows.MessageBox.Show("Load Completed!");

        }

        private void btnDelete_Click(object sender, EventArgs e) {
            //var newCustom = new Customers();
            //_customerRepo.Delete(newCustom.CustomerID);
        }

        private void btnCustomers_Click(object sender, EventArgs e) {
            FormCustomers formCustomers = new FormCustomers();

            formCustomers.ShowDialog();


        }

        private void btnEmployees_Click(object sender, EventArgs e) {
            FormEmployees formEmployees = new FormEmployees();

            formEmployees.ShowDialog();
        }

        private void btnPetFood_Click(object sender, EventArgs e) {
            FormPetFood formPetFood = new FormPetFood();

            formPetFood.ShowDialog();
        }

        private void btnPets_Click(object sender, EventArgs e) {
            FormPets formPet = new FormPets();

            formPet.ShowDialog();
        }

        private void btnTransactions_Click(object sender, EventArgs e) {
            FormTransactions formTransactions = new FormTransactions();

            formTransactions.ShowDialog();
        }

        private void btnPetReport_Click(object sender, EventArgs e) {
            formPetReport formPetReport = new formPetReport();

            formPetReport.ShowDialog();
        }
    }
}