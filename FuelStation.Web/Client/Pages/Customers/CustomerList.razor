@page "/customerlist"
@attribute [Authorize(Roles = "Administrator,User")]
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authenticationStateProvider
@using FuelStation.Web.Shared;
<ShopTitle></ShopTitle>


@if (isLoading) {
    <div class="spinner-border text-secondary" role="status"></div>
} else {
    <h3>Customers</h3>
    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Card Number</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList) {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <BootstrapButton ButtonType="BootstrapButtonType.Warning" OnClick="()=> EditItem(customer)">Edit</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Primary" OnClick="()=> DetailItem(customer)">Details</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> DeleteItem(customer)">Delete</BootstrapButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerListDto> customerList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
            await LoadItemsFromServer();
        }else{

        }
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        if (tempCustomerList is not null) {
            customerList = tempCustomerList;
        } else {
            navigationManager.NavigateTo($"/login");
        }
    }

    //private void CreateItem() {
    //    navigationManager.NavigateTo("customerList/edit");
    //}

    //private void EditItem(CustomerListDto customer) {
    //    navigationManager.NavigateTo($"customerlist/edit/{customer.Id}");
    //}

    //private async Task DeleteItem(CustomerListDto customer) {
    //    var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
    //    if (confirm) {
    //        var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
    //        if (response.IsSuccessStatusCode) {
    //            await LoadItemsFromServer();
    //        } else {
    //            var error = await response.Content.ReadAsStringAsync();
    //            await jsRuntime.InvokeVoidAsync("alert", error);
    //        }
    //    }
    //}

    //private void DetailItem(CustomerListDto customer) {
    //    navigationManager.NavigateTo($"customerList/details/{customer.Id}");
    //}
}