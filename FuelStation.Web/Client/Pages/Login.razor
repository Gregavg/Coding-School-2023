@page "/login"
@using FuelStation.Model.Enums;
@using FuelStation.Web.Client.Authentication;
@using FuelStation.Web.Shared;
@using System.Net;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider


<h3>Login Page</h3>
<p>Username: manager     Password: manager</p>
<p>Username: staff       Password: staff</p>
<p>Username: cashier     Password: cashier</p>


<div class="row">
  <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
    <div class="mb-3 text-center">
      <h3>LOGIN</h3>
    </div>
    <div class="mb-3">
      <label>User Name</label>
      <input @bind="loginRequest.UserName" class="form-control" placeholder="User Name" />
    </div>
    <div class="mb-3">
      <label>Password</label>
      <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
    </div>
    <div class="mb-3 d-grid gap-2">
      <button @onclick="Authenticate" class="btn btn-primary">Login</button>
    </div>
  </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();

    private async Task Authenticate() {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode) {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navigationManager.NavigateTo("/", true);
        } else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized) {
            await jsRuntime.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }  
}
