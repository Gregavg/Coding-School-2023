@inject HttpClient httpClient
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Manager")]
@inject IJSRuntime jsRuntime
@page "/ledgerlist/{Rent:int?}"
@using FuelStation.Web.Shared;
<ShopTitle></ShopTitle>
<h3>Monthly Ledgers</h3>

@if (isLoading) {
    <div class="spinner-border text-secondary" role="status">
    </div>
} else {

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Month</th>
                    <th>Income</th>
                    <th>Expenses</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var monthlyLedger in MonthlyLedgers) {
                <tr>
                    <td>@monthlyLedger.Year</td>
                    <td>@monthlyLedger.Month</td>
                    <td>@monthlyLedger.Income €</td>
                    <td>@monthlyLedger.Expenses €</td>
                    <th>@monthlyLedger.Total €</th>
                </tr>
            }
            </tbody>
        </table>
}
<div class="row mt-2">
    <div class="col">
        <BootstrapButton ButtonType = "BootstrapButtonType.Secondary" OnClick="OnCancel">Back</BootstrapButton>
    </div>

</div>

@code {
    [Parameter] public int? Rent { get; set; }
    private List<LedgerDto> MonthlyLedgers = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempMonthlyLedgers = await httpClient.GetFromJsonAsync<List<LedgerDto>>($"ledger/{Rent}");
        if (tempMonthlyLedgers is not null) {
            MonthlyLedgers = tempMonthlyLedgers;
        } 
    }


    private void OnCancel() {
        navigationManager.NavigateTo("ledger");
    }


}