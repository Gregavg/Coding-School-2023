@page "/itemlist"
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Manager, Staff")]
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@using FuelStation.Web.Shared;
<ShopTitle></ShopTitle>


@if (isLoading) {
        <div class="spinner-border text-secondary" role="status">
        </div>
} else {
        <h3>Items</h3>
    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Description</th>
                    <th>Cost</th>
                    <th>Price</th>
                    <th>Item Type</th>
                    <th>Actions</th>

                </tr>
            </thead>
            <tbody>
    @foreach (var item in itemList) {
        <tr>
            <td>@item.Code</td>
            <td>@item.Description</td>
            <td>@item.Cost €</td>
            <td>@item.Price €</td>
            <td>@item.ItemType</td>
            <td>
                <BootstrapButton ButtonType = "BootstrapButtonType.Warning" OnClick="()=> EditItem(item)">Edit</BootstrapButton>
                <BootstrapButton ButtonType="BootstrapButtonType.Primary" OnClick="()=> DetailItem(item)">Details</BootstrapButton>
                <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> DeleteItem(item)">Delete</BootstrapButton>
            </td>
        </tr>
    }
            </tbody>
        </table>
}

@code {
    private List<ItemListDto> itemList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempItemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
        if (tempItemList is not null) {
            itemList = tempItemList;
        } 

    }

    private void CreateItem() {
        navigationManager.NavigateTo("itemList/edit");
    }

    private void EditItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/edit/{item.Id}");
    }


    private async Task DeleteItem(ItemListDto item) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"item/{item.Id}");
            if (response.IsSuccessStatusCode) {
                await LoadItemsFromServer();
            } else {
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }


    private void DetailItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemlist/details/{item.Id}");
    }
}